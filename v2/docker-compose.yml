version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: magic-flow-postgres
    environment:
      POSTGRES_DB: magic_flow
      POSTGRES_USER: magic_flow
      POSTGRES_PASSWORD: magic_flow_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - magic-flow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U magic_flow -d magic_flow"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: magic-flow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - magic-flow-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    command: redis-server --appendonly yes

  # Magic Flow Application
  magic-flow:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: magic-flow-app
    ports:
      - "8080:8080"  # API server
      - "8081:8081"  # Dashboard
    environment:
      - CONFIG_PATH=/app/configs/docker.yaml
      - DATABASE_URL=postgres://magic_flow:magic_flow_password@postgres:5432/magic_flow?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - GIN_MODE=release
      - LOG_LEVEL=info
    volumes:
      - ./configs:/app/configs
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - magic-flow-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: magic-flow-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - magic-flow-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: magic-flow-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/grafana/provisioning:/etc/grafana/provisioning
      - ./deployments/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - magic-flow-network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: magic-flow-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployments/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployments/nginx/conf.d:/etc/nginx/conf.d
      - ./deployments/nginx/ssl:/etc/nginx/ssl
    networks:
      - magic-flow-network
    depends_on:
      - magic-flow
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  magic-flow-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16